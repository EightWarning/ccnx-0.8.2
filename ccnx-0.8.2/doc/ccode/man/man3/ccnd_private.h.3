.TH "ccnd/ccnd_private.h" 3 "Tue Apr 1 2014" "Version 0.8.2" "Content-Centric Networking in C" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ccnd/ccnd_private.h \- 
.PP
Private definitions for ccnd - the CCNx daemon\&.  

.SH SYNOPSIS
.br
.PP
.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBncelinks\fP"
.br
.ti -1c
.RI "struct \fBccnd_handle\fP"
.br
.RI "\fIWe pass this handle almost everywhere within ccnd\&. \fP"
.ti -1c
.RI "struct \fBcontent_queue\fP"
.br
.ti -1c
.RI "struct \fBface\fP"
.br
.RI "\fIOne of our active faces\&. \fP"
.ti -1c
.RI "struct \fBfaceattr_index_entry\fP"
.br
.RI "\fIEntry in faceattr_index_tab\&. \fP"
.ti -1c
.RI "struct \fBcontent_entry\fP"
.br
.RI "\fIContent table entry\&. \fP"
.ti -1c
.RI "struct \fBielinks\fP"
.br
.ti -1c
.RI "struct \fBinterest_entry\fP"
.br
.RI "\fIThe interest hash table is keyed by the interest message\&. \fP"
.ti -1c
.RI "struct \fBnonce_entry\fP"
.br
.RI "\fIThe nonce hash table is keyed by the interest nonce\&. \fP"
.ti -1c
.RI "struct \fBguest_entry\fP"
.br
.RI "\fIThe guest hash table is keyed by the faceid of the requestor\&. \fP"
.ti -1c
.RI "struct \fBnameprefix_entry\fP"
.br
.RI "\fIThe nameprefix hash table is keyed by the Component elements of the Name prefix\&. \fP"
.ti -1c
.RI "struct \fBccn_forwarding\fP"
.br
.RI "\fIKeeps track of the faces that interests matching a given name prefix may be forwarded to\&. \fP"
.in -1c
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBFACESLOTBITS\fP   18"
.br
.RI "\fIEach face is referenced by a number, the faceid\&. \fP"
.ti -1c
.RI "#define \fBMAXFACES\fP   ((1U << FACESLOTBITS) - 1)"
.br
.ti -1c
.RI "#define \fBCCN_FACE_LINK\fP   (1 << 0)"
.br
.RI "\fIface flags \fP"
.ti -1c
.RI "#define \fBCCN_FACE_DGRAM\fP   (1 << 1)"
.br
.RI "\fIDatagram interface, respect packets\&. \fP"
.ti -1c
.RI "#define \fBCCN_FACE_GG\fP   (1 << 2)"
.br
.RI "\fIConsidered friendly\&. \fP"
.ti -1c
.RI "#define \fBCCN_FACE_LOCAL\fP   (1 << 3)"
.br
.RI "\fIPF_UNIX socket\&. \fP"
.ti -1c
.RI "#define \fBCCN_FACE_INET\fP   (1 << 4)"
.br
.RI "\fIIPv4\&. \fP"
.ti -1c
.RI "#define \fBCCN_FACE_MCAST\fP   (1 << 5)"
.br
.RI "\fIa party line (e\&.g\&. \fP"
.ti -1c
.RI "#define \fBCCN_FACE_INET6\fP   (1 << 6)"
.br
.RI "\fIIPv6\&. \fP"
.ti -1c
.RI "#define \fBCCN_FACE_DC\fP   (1 << 7)"
.br
.RI "\fIDirect control face\&. \fP"
.ti -1c
.RI "#define \fBCCN_FACE_NOSEND\fP   (1 << 8)"
.br
.RI "\fIDon't send anymore\&. \fP"
.ti -1c
.RI "#define \fBCCN_FACE_UNDECIDED\fP   (1 << 9)"
.br
.RI "\fIMight not be talking ccn\&. \fP"
.ti -1c
.RI "#define \fBCCN_FACE_PERMANENT\fP   (1 << 10)"
.br
.RI "\fINo timeout for inactivity\&. \fP"
.ti -1c
.RI "#define \fBCCN_FACE_CONNECTING\fP   (1 << 11)"
.br
.RI "\fIConnect in progress\&. \fP"
.ti -1c
.RI "#define \fBCCN_FACE_LOOPBACK\fP   (1 << 12)"
.br
.RI "\fIv4 or v6 loopback address \fP"
.ti -1c
.RI "#define \fBCCN_FACE_CLOSING\fP   (1 << 13)"
.br
.RI "\fIclose stream when output is done \fP"
.ti -1c
.RI "#define \fBCCN_FACE_PASSIVE\fP   (1 << 14)"
.br
.RI "\fIa listener or a bound dgram socket \fP"
.ti -1c
.RI "#define \fBCCN_FACE_NORECV\fP   (1 << 15)"
.br
.RI "\fIuse for sending only \fP"
.ti -1c
.RI "#define \fBCCN_FACE_REGOK\fP   (1 << 16)"
.br
.RI "\fIAllowed to do prefix registration\&. \fP"
.ti -1c
.RI "#define \fBCCN_FACE_SEQOK\fP   (1 << 17) /** OK to send SequenceNumber link messages */"
.br
.ti -1c
.RI "#define \fBCCN_FACE_SEQPROBE\fP   (1 << 18) /** SequenceNumber probe */"
.br
.ti -1c
.RI "#define \fBCCN_FACE_LC\fP   (1 << 19) /** A link check has been issued recently */"
.br
.ti -1c
.RI "#define \fBCCN_FACE_BC\fP   (1 << 20) /** Needs SO_BROADCAST to send */"
.br
.ti -1c
.RI "#define \fBCCN_FACE_NBC\fP   (1 << 21) /** Don't use SO_BROADCAST to send */"
.br
.ti -1c
.RI "#define \fBCCN_FACE_ADJ\fP   (1 << 22) /** Adjacency guid has been negotiatied */"
.br
.ti -1c
.RI "#define \fBCCN_CONTENT_ENTRY_SLOWSEND\fP   1"
.br
.RI "\fI\fBcontent_entry\fP flags \fP"
.ti -1c
.RI "#define \fBCCN_FORW_PFXO\fP   (\fBCCN_FORW_ADVERTISE\fP | \fBCCN_FORW_CAPTURE\fP | \fBCCN_FORW_LOCAL\fP)"
.br
.RI "\fIRefer to doc/technical/Registration\&.txt for the meaning of these flags\&. \fP"
.ti -1c
.RI "#define \fBCCN_FORW_REFRESHED\fP   (1 << 16)"
.br
.RI "\fIprivate to ccnd \fP"
.ti -1c
.RI "#define \fBCCN_FWU_SECS\fP   5"
.br
.RI "\fIDetermines how frequently we age our forwarding entries\&. \fP"
.ti -1c
.RI "#define \fBCCNDID_LOCAL_URI\fP   'ccnx:/%C1\&.M\&.S\&.localhost/%C1\&.M\&.SRV/ccnd/\fBKEY\fP'"
.br
.RI "\fIURIs for prefixes served by the internal client\&. \fP"
.ti -1c
.RI "#define \fBCCNDID_NEIGHBOR_URI\fP   'ccnx:/%C1\&.M\&.S\&.neighborhood/%C1\&.M\&.SRV/ccnd/\fBKEY\fP'"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef int(* \fBccnd_logger\fP )(void *loggerdata, const char *format, va_list ap)"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBcq_delay_class\fP { \fBCCN_CQ_ASAP\fP, \fBCCN_CQ_NORMAL\fP, \fBCCN_CQ_SLOW\fP, \fBCCN_CQ_N\fP, \fBCCN_CQ_ASAP\fP, \fBCCN_CQ_NORMAL\fP, \fBCCN_CQ_SLOW\fP, \fBCCN_CQ_N\fP }"
.br
.ti -1c
.RI "enum \fBccnd_face_meter_index\fP { \fBFM_BYTI\fP, \fBFM_BYTO\fP, \fBFM_DATI\fP, \fBFM_INTO\fP, \fBFM_DATO\fP, \fBFM_INTI\fP, \fBCCND_FACE_METER_N\fP }"
.br
.RI "\fIFace meter index\&. \fP"
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "struct ccnd_meter * \fBccnd_meter_create\fP (struct \fBccnd_handle\fP *h, const char *what)"
.br
.RI "\fIcreate and initialize separately allocated meter\&. \fP"
.ti -1c
.RI "void \fBccnd_meter_destroy\fP (struct ccnd_meter **)"
.br
.RI "\fIDestroy a separately allocated meter\&. \fP"
.ti -1c
.RI "void \fBccnd_meter_init\fP (struct \fBccnd_handle\fP *h, struct ccnd_meter *m, const char *what)"
.br
.RI "\fIInitialize a meter\&. \fP"
.ti -1c
.RI "void \fBccnd_meter_bump\fP (struct \fBccnd_handle\fP *h, struct ccnd_meter *m, unsigned amt)"
.br
.RI "\fICount something (messages, packets, bytes), and roll up some kind of statistics on it\&. \fP"
.ti -1c
.RI "unsigned \fBccnd_meter_rate\fP (struct \fBccnd_handle\fP *h, struct ccnd_meter *m)"
.br
.RI "\fIReturn the average rate (units per second) of a metered quantity\&. \fP"
.ti -1c
.RI "uintmax_t \fBccnd_meter_total\fP (struct ccnd_meter *m)"
.br
.RI "\fIReturn the grand total for a metered quantity\&. \fP"
.ti -1c
.RI "int \fBccnd_init_internal_keystore\fP (struct \fBccnd_handle\fP *)"
.br
.ti -1c
.RI "int \fBccnd_internal_client_start\fP (struct \fBccnd_handle\fP *)"
.br
.ti -1c
.RI "void \fBccnd_internal_client_stop\fP (struct \fBccnd_handle\fP *)"
.br
.ti -1c
.RI "int \fBccnd_req_newface\fP (struct \fBccnd_handle\fP *h, const unsigned char *msg, size_t size, struct \fBccn_charbuf\fP *reply_body)"
.br
.RI "\fIProcess a newface request for the ccnd internal client\&. \fP"
.ti -1c
.RI "int \fBccnd_req_destroyface\fP (struct \fBccnd_handle\fP *h, const unsigned char *msg, size_t size, struct \fBccn_charbuf\fP *reply_body)"
.br
.RI "\fIProcess a destroyface request for the ccnd internal client\&. \fP"
.ti -1c
.RI "int \fBccnd_req_prefixreg\fP (struct \fBccnd_handle\fP *h, const unsigned char *msg, size_t size, struct \fBccn_charbuf\fP *reply_body)"
.br
.RI "\fIProcess a prefixreg request for the ccnd internal client\&. \fP"
.ti -1c
.RI "int \fBccnd_req_selfreg\fP (struct \fBccnd_handle\fP *h, const unsigned char *msg, size_t size, struct \fBccn_charbuf\fP *reply_body)"
.br
.RI "\fIProcess a selfreg request for the ccnd internal client\&. \fP"
.ti -1c
.RI "int \fBccnd_req_strategy\fP (struct \fBccnd_handle\fP *h, const unsigned char *msg, size_t size, const char *action, struct \fBccn_charbuf\fP *reply_body)"
.br
.RI "\fIProcess a strategy selection request\&. \fP"
.ti -1c
.RI "int \fBccnd_req_unreg\fP (struct \fBccnd_handle\fP *h, const unsigned char *msg, size_t size, struct \fBccn_charbuf\fP *reply_body)"
.br
.RI "\fIProcess an unreg request for the ccnd internal client\&. \fP"
.ti -1c
.RI "int \fBccnd_reg_uri\fP (struct \fBccnd_handle\fP *h, const char *uri, unsigned faceid, int flags, int expires)"
.br
.RI "\fIRegister a prefix, expressed in the form of a URI\&. \fP"
.ti -1c
.RI "struct \fBstrategy_class\fP * \fBstrategy_class_from_id\fP (const char *id)"
.br
.ti -1c
.RI "struct \fBstrategy_instance\fP * \fBcreate_strategy_instance\fP (struct \fBccnd_handle\fP *h, struct \fBnameprefix_entry\fP *npe, const struct \fBstrategy_class\fP *sclass, const char *parameters)"
.br
.ti -1c
.RI "struct \fBstrategy_instance\fP * \fBget_strategy_instance\fP (struct \fBccnd_handle\fP *h, struct \fBnameprefix_entry\fP *npe)"
.br
.RI "\fISearch the nameprefix tree to find the strategy that is in effect\&. \fP"
.ti -1c
.RI "void \fBremove_strategy_instance\fP (struct \fBccnd_handle\fP *h, struct \fBnameprefix_entry\fP *npe)"
.br
.ti -1c
.RI "void \fBccnd_generate_face_guid\fP (struct \fBccnd_handle\fP *h, struct \fBface\fP *\fBface\fP, int size, const unsigned char *lo, const unsigned char *hi)"
.br
.RI "\fIGenerate a new guid for a face\&. \fP"
.ti -1c
.RI "int \fBccnd_set_face_guid\fP (struct \fBccnd_handle\fP *h, struct \fBface\fP *\fBface\fP, const unsigned char *guid, size_t size)"
.br
.RI "\fIAssociate a guid with a face\&. \fP"
.ti -1c
.RI "void \fBccnd_forget_face_guid\fP (struct \fBccnd_handle\fP *h, struct \fBface\fP *\fBface\fP)"
.br
.RI "\fIForget the guid associated with a face\&. \fP"
.ti -1c
.RI "int \fBccnd_append_face_guid\fP (struct \fBccnd_handle\fP *h, struct \fBccn_charbuf\fP *cb, struct \fBface\fP *\fBface\fP)"
.br
.RI "\fIAppend the guid associated with a face to a charbuf\&. \fP"
.ti -1c
.RI "unsigned \fBccnd_faceid_from_guid\fP (struct \fBccnd_handle\fP *h, const unsigned char *guid, size_t size)"
.br
.RI "\fIReturn the faceid associated with the guid\&. \fP"
.ti -1c
.RI "void \fBccnd_adjacency_offer_or_commit_req\fP (struct \fBccnd_handle\fP *ccnd, struct \fBface\fP *\fBface\fP)"
.br
.RI "\fIExpress an interest to pull adjacency information from the other side\&. \fP"
.ti -1c
.RI "void \fBccnd_internal_client_has_somthing_to_say\fP (struct \fBccnd_handle\fP *h)"
.br
.RI "\fISchedule the processing of internal client results\&. \fP"
.ti -1c
.RI "struct \fBface\fP * \fBccnd_face_from_faceid\fP (struct \fBccnd_handle\fP *, unsigned)"
.br
.RI "\fILooks up a face based on its faceid\&. \fP"
.ti -1c
.RI "void \fBccnd_face_status_change\fP (struct \fBccnd_handle\fP *, unsigned)"
.br
.RI "\fICalled by ccnd when a face undergoes a substantive status change that should be reported to interested parties\&. \fP"
.ti -1c
.RI "int \fBccnd_destroy_face\fP (struct \fBccnd_handle\fP *h, unsigned faceid)"
.br
.RI "\fIDestroys the face identified by faceid\&. \fP"
.ti -1c
.RI "void \fBccnd_send\fP (struct \fBccnd_handle\fP *h, struct \fBface\fP *\fBface\fP, const void *data, size_t size)"
.br
.RI "\fISend data to the face\&. \fP"
.ti -1c
.RI "int \fBccnd_n_stale\fP (struct \fBccnd_handle\fP *h)"
.br
.RI "\fIReturn the number of stale content objects still cached\&. \fP"
.ti -1c
.RI "int \fBccnd_stats_handle_http_connection\fP (struct \fBccnd_handle\fP *, struct \fBface\fP *)"
.br
.ti -1c
.RI "void \fBccnd_msg\fP (struct \fBccnd_handle\fP *, const char *,\&.\&.\&.)"
.br
.RI "\fIProduce ccnd debug output\&. \fP"
.ti -1c
.RI "void \fBccnd_debug_ccnb\fP (struct \fBccnd_handle\fP *h, int lineno, const char *msg, struct \fBface\fP *\fBface\fP, const unsigned char *ccnb, size_t ccnb_size)"
.br
.RI "\fIProduce a ccnd debug trace entry\&. \fP"
.ti -1c
.RI "void \fBccnd_debug_content\fP (struct \fBccnd_handle\fP *h, int lineno, const char *msg, struct \fBface\fP *\fBface\fP, struct \fBcontent_entry\fP *content)"
.br
.RI "\fIProduce a ccnd debug trace entry for content\&. \fP"
.ti -1c
.RI "struct \fBccnd_handle\fP * \fBccnd_create\fP (const char *, \fBccnd_logger\fP, void *)"
.br
.RI "\fIStart a new ccnd instance\&. \fP"
.ti -1c
.RI "void \fBccnd_run\fP (struct \fBccnd_handle\fP *h)"
.br
.RI "\fIRun the main loop of the ccnd\&. \fP"
.ti -1c
.RI "void \fBccnd_destroy\fP (struct \fBccnd_handle\fP **)"
.br
.RI "\fIDestroy the ccnd instance, releasing all associated resources\&. \fP"
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "const char * \fBccnd_usage_message\fP"
.br
.RI "\fICCND Usage message\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Private definitions for ccnd - the CCNx daemon\&. 

Data structures are described here so that logging and status routines can be compiled separately\&.
.PP
Part of ccnd - the CCNx Daemon\&. 
.PP
Definition in file \fBccnd_private\&.h\fP\&.
.SH "Define Documentation"
.PP 
.SS "#define \fBCCN_CONTENT_ENTRY_SLOWSEND\fP   1"
.PP
\fBcontent_entry\fP flags 
.PP
Definition at line 297 of file ccnd_private\&.h\&.
.PP
Referenced by choose_content_delay_class()\&.
.SS "#define \fBCCN_FACE_ADJ\fP   (1 << 22) /** Adjacency guid has been negotiatied */"
.PP
Definition at line 255 of file ccnd_private\&.h\&.
.PP
Referenced by adjacency_timed_reset(), ccnd_answer_by_guid(), ccnd_do_solicit(), ccnd_register_adjacency(), check_dgram_faces(), post_face_notice(), and schedule_adjacency_negotiation()\&.
.SS "#define \fBCCN_FACE_BC\fP   (1 << 20) /** Needs SO_BROADCAST to send */"
.PP
Definition at line 253 of file ccnd_private\&.h\&.
.PP
Referenced by ccnd_do_solicit(), ccnd_send(), and schedule_adjacency_negotiation()\&.
.SS "#define \fBCCN_FACE_CLOSING\fP   (1 << 13)"
.PP
close stream when output is done 
.PP
Definition at line 246 of file ccnd_private\&.h\&.
.PP
Referenced by ccnd_stats_handle_http_connection(), do_deferred_write(), and prepare_poll_fds()\&.
.SS "#define \fBCCN_FACE_CONNECTING\fP   (1 << 11)"
.PP
Connect in progress\&. 
.PP
Definition at line 244 of file ccnd_private\&.h\&.
.PP
Referenced by ccnd_do_solicit(), ccnd_req_newface(), do_deferred_write(), make_connection(), process_input(), and schedule_adjacency_negotiation()\&.
.SS "#define \fBCCN_FACE_DC\fP   (1 << 7)"
.PP
Direct control face\&. 
.PP
Definition at line 240 of file ccnd_private\&.h\&.
.PP
Referenced by adjust_builtin_faceattr(), ccnd_reg_prefix(), do_propagate(), and get_outbound_faces()\&.
.SS "#define \fBCCN_FACE_DGRAM\fP   (1 << 1)"
.PP
Datagram interface, respect packets\&. 
.PP
Definition at line 234 of file ccnd_private\&.h\&.
.PP
Referenced by ccn_link_state_init(), ccnd_destroy_face(), ccnd_getboundsocket(), ccnd_listen_on_address(), ccnd_listen_on_wildcards(), ccnd_send(), check_dgram_faces(), choose_content_delay_class(), do_propagate(), get_dgram_source(), make_connection(), process_incoming_link_message(), process_input(), setup_multicast(), and stuff_link_check()\&.
.SS "#define \fBCCN_FACE_GG\fP   (1 << 2)"
.PP
Considered friendly\&. 
.PP
Definition at line 235 of file ccnd_private\&.h\&.
.PP
Referenced by adjust_builtin_faceattr(), ccn_link_state_init(), ccnd_create(), ccnd_do_solicit(), ccnd_generate_face_guid(), ccnd_req_destroyface(), ccnd_req_guest(), ccnd_req_newface(), ccnd_req_prefix_or_self_reg(), ccnd_req_strategy(), ccnd_req_unreg(), choose_content_delay_class(), collect_faces_html(), drop_nonlocal_interest(), get_dgram_source(), get_outbound_faces(), match_interests(), process_incoming_content(), process_incoming_interest(), process_input_message(), register_new_face(), schedule_adjacency_negotiation(), stuff_link_check(), and update_npe_children()\&.
.SS "#define \fBCCN_FACE_INET\fP   (1 << 4)"
.PP
IPv4\&. 
.PP
Definition at line 237 of file ccnd_private\&.h\&.
.PP
Referenced by accept_connection(), init_face_flags(), and post_face_notice()\&.
.SS "#define \fBCCN_FACE_INET6\fP   (1 << 6)"
.PP
IPv6\&. 
.PP
Definition at line 239 of file ccnd_private\&.h\&.
.PP
Referenced by accept_connection(), init_face_flags(), and post_face_notice()\&.
.SS "#define \fBCCN_FACE_LC\fP   (1 << 19) /** A link check has been issued recently */"
.PP
Definition at line 252 of file ccnd_private\&.h\&.
.PP
Referenced by check_dgram_faces(), and stuff_link_check()\&.
.SS "#define \fBCCN_FACE_LINK\fP   (1 << 0)"
.PP
face flags Elements wrapped by CCNProtocolDataUnit 
.PP
Definition at line 233 of file ccnd_private\&.h\&.
.PP
Referenced by choose_content_delay_class(), make_connection(), process_input_message(), setup_multicast(), and stuff_and_send()\&.
.SS "#define \fBCCN_FACE_LOCAL\fP   (1 << 3)"
.PP
PF_UNIX socket\&. 
.PP
Definition at line 236 of file ccnd_private\&.h\&.
.PP
Referenced by accept_connection(), choose_content_delay_class(), create_local_listener(), init_face_flags(), make_connection(), process_input(), process_input_message(), and setup_multicast()\&.
.SS "#define \fBCCN_FACE_LOOPBACK\fP   (1 << 12)"
.PP
v4 or v6 loopback address 
.PP
Definition at line 245 of file ccnd_private\&.h\&.
.PP
Referenced by get_dgram_source(), init_face_flags(), and process_input_message()\&.
.SS "#define \fBCCN_FACE_MCAST\fP   (1 << 5)"
.PP
a party line (e\&.g\&. multicast) 
.PP
Definition at line 238 of file ccnd_private\&.h\&.
.PP
Referenced by adjust_builtin_faceattr(), ccn_link_state_init(), ccnd_destroy_face(), ccnd_do_solicit(), ccnd_shutdown_listeners(), choose_content_delay_class(), choose_face_delay(), collect_faces_html(), get_dgram_source(), prepare_poll_fds(), process_incoming_link_message(), schedule_adjacency_negotiation(), setup_multicast(), and stuff_link_check()\&.
.SS "#define \fBCCN_FACE_NBC\fP   (1 << 21) /** Don't use SO_BROADCAST to send */"
.PP
Definition at line 254 of file ccnd_private\&.h\&.
.PP
Referenced by ccnd_send()\&.
.SS "#define \fBCCN_FACE_NORECV\fP   (1 << 15)"
.PP
use for sending only 
.PP
Definition at line 248 of file ccnd_private\&.h\&.
.PP
Referenced by ccnd_do_solicit(), ccnd_getboundsocket(), prepare_poll_fds(), and schedule_adjacency_negotiation()\&.
.SS "#define \fBCCN_FACE_NOSEND\fP   (1 << 8)"
.PP
Don't send anymore\&. 
.PP
Definition at line 241 of file ccnd_private\&.h\&.
.PP
Referenced by adjust_builtin_faceattr(), ccnd_do_solicit(), ccnd_send(), ccnd_stats_handle_http_connection(), collect_faces_html(), content_sender(), do_deferred_write(), do_propagate(), face_send_queue_insert(), handle_send_error(), make_connection(), schedule_adjacency_negotiation(), send_content(), and setup_multicast()\&.
.SS "#define \fBCCN_FACE_PASSIVE\fP   (1 << 14)"
.PP
a listener or a bound dgram socket 
.PP
Definition at line 247 of file ccnd_private\&.h\&.
.PP
Referenced by adjust_builtin_faceattr(), ccnd_do_solicit(), ccnd_generate_face_guid(), ccnd_getboundsocket(), ccnd_listen_on_address(), ccnd_listen_on_wildcards(), ccnd_shutdown_listeners(), collect_face_meter_html(), collect_faces_html(), collect_faces_xml(), create_local_listener(), process_input(), register_new_face(), and schedule_adjacency_negotiation()\&.
.SS "#define \fBCCN_FACE_PERMANENT\fP   (1 << 10)"
.PP
No timeout for inactivity\&. 
.PP
Definition at line 243 of file ccnd_private\&.h\&.
.PP
Referenced by ccnd_req_newface(), check_dgram_faces(), and schedule_adjacency_negotiation()\&.
.SS "#define \fBCCN_FACE_REGOK\fP   (1 << 16)"
.PP
Allowed to do prefix registration\&. 
.PP
Definition at line 249 of file ccnd_private\&.h\&.
.PP
Referenced by ccnd_req_prefix_or_self_reg(), and ccnd_req_strategy()\&.
.SS "#define \fBCCN_FACE_SEQOK\fP   (1 << 17) /** OK to send SequenceNumber link messages */"
.PP
Definition at line 250 of file ccnd_private\&.h\&.
.PP
Referenced by ccn_append_link_stuff(), ccn_link_state_init(), process_incoming_link_message(), and stuff_and_send()\&.
.SS "#define \fBCCN_FACE_SEQPROBE\fP   (1 << 18) /** SequenceNumber probe */"
.PP
Definition at line 251 of file ccnd_private\&.h\&.
.PP
Referenced by ccn_append_link_stuff(), ccn_link_state_init(), and stuff_and_send()\&.
.SS "#define \fBCCN_FACE_UNDECIDED\fP   (1 << 9)"
.PP
Might not be talking ccn\&. 
.PP
Definition at line 242 of file ccnd_private\&.h\&.
.PP
Referenced by accept_connection(), adjust_builtin_faceattr(), ccnd_do_solicit(), ccnd_generate_face_guid(), collect_face_meter_html(), collect_faces_html(), collect_faces_xml(), finalize_face(), make_connection(), process_input(), process_input_message(), register_new_face(), and schedule_adjacency_negotiation()\&.
.SS "#define \fBCCN_FORW_PFXO\fP   (\fBCCN_FORW_ADVERTISE\fP | \fBCCN_FORW_CAPTURE\fP | \fBCCN_FORW_LOCAL\fP)"
.PP
Refer to doc/technical/Registration\&.txt for the meaning of these flags\&. CCN_FORW_ACTIVE 1 CCN_FORW_CHILD_INHERIT 2 CCN_FORW_ADVERTISE 4 CCN_FORW_LAST 8 CCN_FORW_CAPTURE 16 CCN_FORW_LOCAL 32 CCN_FORW_TAP 64 CCN_FORW_CAPTURE_OK 128 
.PP
Definition at line 398 of file ccnd_private\&.h\&.
.PP
Referenced by collect_forwarding_html(), and collect_forwarding_xml()\&.
.SS "#define \fBCCN_FORW_REFRESHED\fP   (1 << 16)"
.PP
private to ccnd 
.PP
Definition at line 399 of file ccnd_private\&.h\&.
.PP
Referenced by age_forwarding(), and ccnd_reg_prefix()\&.
.SS "#define \fBCCN_FWU_SECS\fP   5"
.PP
Determines how frequently we age our forwarding entries\&. 
.PP
Definition at line 404 of file ccnd_private\&.h\&.
.PP
Referenced by age_forwarding(), and age_forwarding_needed()\&.
.SS "#define \fBCCNDID_LOCAL_URI\fP   'ccnx:/%C1\&.M\&.S\&.localhost/%C1\&.M\&.SRV/ccnd/\fBKEY\fP'"
.PP
URIs for prefixes served by the internal client\&. 
.PP
Definition at line 459 of file ccnd_private\&.h\&.
.PP
Referenced by ccnd_answer_req()\&.
.SS "#define \fBCCNDID_NEIGHBOR_URI\fP   'ccnx:/%C1\&.M\&.S\&.neighborhood/%C1\&.M\&.SRV/ccnd/\fBKEY\fP'"
.PP
Definition at line 460 of file ccnd_private\&.h\&.
.PP
Referenced by ccnd_answer_req(), and stuff_link_check()\&.
.SS "#define \fBFACESLOTBITS\fP   18"
.PP
Each face is referenced by a number, the faceid\&. The low-order bits (under the MAXFACES) constitute a slot number that is unique (for this ccnd) among the faces that are alive at a given time\&. The rest of the bits form a generation number that make the entire faceid unique over time, even for faces that are defunct\&. 
.PP
Definition at line 168 of file ccnd_private\&.h\&.
.SS "#define \fBMAXFACES\fP   ((1U << FACESLOTBITS) - 1)"
.PP
Definition at line 169 of file ccnd_private\&.h\&.
.PP
Referenced by enroll_face(), face_from_faceid(), and finalize_face()\&.
.SH "Typedef Documentation"
.PP 
.SS "typedef int(* \fBccnd_logger\fP)(void *loggerdata, const char *format, va_list ap)"
.PP
Definition at line 64 of file ccnd_private\&.h\&.
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBccnd_face_meter_index\fP"
.PP
Face meter index\&. 
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fIFM_BYTI \fP\fP
.TP
\fB\fIFM_BYTO \fP\fP
.TP
\fB\fIFM_DATI \fP\fP
.TP
\fB\fIFM_INTO \fP\fP
.TP
\fB\fIFM_DATO \fP\fP
.TP
\fB\fIFM_INTI \fP\fP
.TP
\fB\fICCND_FACE_METER_N \fP\fP

.PP
Definition at line 191 of file ccnd_private\&.h\&.
.SS "enum \fBcq_delay_class\fP"
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fICCN_CQ_ASAP \fP\fP
.TP
\fB\fICCN_CQ_NORMAL \fP\fP
.TP
\fB\fICCN_CQ_SLOW \fP\fP
.TP
\fB\fICCN_CQ_N \fP\fP
.TP
\fB\fICCN_CQ_ASAP \fP\fP
.TP
\fB\fICCN_CQ_NORMAL \fP\fP
.TP
\fB\fICCN_CQ_SLOW \fP\fP
.TP
\fB\fICCN_CQ_N \fP\fP

.PP
Definition at line 181 of file ccnd_private\&.h\&.
.SH "Function Documentation"
.PP 
.SS "void \fBccnd_adjacency_offer_or_commit_req\fP (struct \fBccnd_handle\fP *ccnd, struct \fBface\fP *face)"
.PP
Express an interest to pull adjacency information from the other side\&. 
.PP
Definition at line 644 of file ccnd_internal_client\&.c\&.
.PP
Referenced by adjacency_do_refresh(), ccnd_answer_req(), and incoming_adjacency()\&.
.SS "int \fBccnd_append_face_guid\fP (struct \fBccnd_handle\fP *h, struct \fBccn_charbuf\fP *cb, struct \fBface\fP *face)"
.PP
Append the guid associated with a face to a charbuf\&. \fBReturns:\fP
.RS 4
the length of the appended guid, or -1 for error\&. 
.RE
.PP

.PP
Definition at line 573 of file ccnd\&.c\&.
.PP
Referenced by append_adjacency_uri(), ccnd_adjacency_offer_or_commit_req(), and ccnd_init_face_guid_cob()\&.
.SS "struct \fBccnd_handle\fP* \fBccnd_create\fP (const char *progname, \fBccnd_logger\fPlogger, void *loggerdata)\fC [read]\fP"
.PP
Start a new ccnd instance\&. \fBParameters:\fP
.RS 4
\fIprogname\fP - name of program binary, used for locating helpers 
.br
\fIlogger\fP - logger function 
.br
\fIloggerdata\fP - data to pass to logger function 
.RE
.PP

.PP
Definition at line 5998 of file ccnd\&.c\&.
.PP
Referenced by main(), and start_ccnd()\&.
.SS "void \fBccnd_debug_ccnb\fP (struct \fBccnd_handle\fP *h, intlineno, const char *msg, struct \fBface\fP *face, const unsigned char *ccnb, size_tccnb_size)"
.PP
Produce a ccnd debug trace entry\&. Output is produced by calling ccnd_msg\&. 
.PP
\fBParameters:\fP
.RS 4
\fIh\fP the ccnd handle 
.br
\fIlineno\fP caller's source line number (usually __LINE__) 
.br
\fImsg\fP a short text tag to identify the entry 
.br
\fIface\fP handle of associated face; may be NULL 
.br
\fIccnb\fP points to ccnb-encoded Interest or ContentObject 
.br
\fIccnb_size\fP is in bytes 
.RE
.PP

.PP
Definition at line 166 of file ccnd_msg\&.c\&.
.PP
Referenced by age_forwarding(), ccnd_answer_req(), ccnd_reg_prefix(), ccnd_req_unreg(), do_propagate(), drop_nonlocal_interest(), next_child_at_level(), process_incoming_content(), process_incoming_interest(), stuff_and_send(), and stuff_link_check()\&.
.SS "void \fBccnd_debug_content\fP (struct \fBccnd_handle\fP *h, intlineno, const char *msg, struct \fBface\fP *face, struct \fBcontent_entry\fP *content)"
.PP
Produce a ccnd debug trace entry for content\&. This takes a content handle so that we can print the already-computed implicit digest\&. 
.PP
Definition at line 266 of file ccnd_msg\&.c\&.
.PP
Referenced by content_tree_trim(), face_send_queue_insert(), process_incoming_content(), process_incoming_interest(), remove_content(), and send_content()\&.
.SS "void \fBccnd_destroy\fP (struct \fBccnd_handle\fP **)"
.PP
Destroy the ccnd instance, releasing all associated resources\&. 
.PP
Definition at line 6197 of file ccnd\&.c\&.
.PP
Referenced by main()\&.
.SS "int \fBccnd_destroy_face\fP (struct \fBccnd_handle\fP *h, unsignedfaceid)"
.PP
Destroys the face identified by faceid\&. \fBReturns:\fP
.RS 4
0 for success, -1 for failure\&. 
.RE
.PP

.PP
Definition at line 2354 of file ccnd\&.c\&.
.PP
Referenced by ccnd_req_destroyface(), and ccnd_stats_handle_http_connection()\&.
.SS "struct \fBface\fP* \fBccnd_face_from_faceid\fP (struct \fBccnd_handle\fP *, unsigned)\fC [read]\fP"
.PP
Looks up a face based on its faceid\&. 
.PP
Definition at line 309 of file ccnd\&.c\&.
.SS "void \fBccnd_face_status_change\fP (struct \fBccnd_handle\fP *ccnd, unsignedfaceid)"
.PP
Called by ccnd when a face undergoes a substantive status change that should be reported to interested parties\&. In the destroy case, this is called from the hash table finalizer, so it shouldn't do much directly\&. Inspecting the face is OK, though\&. 
.PP
Definition at line 1515 of file ccnd_internal_client\&.c\&.
.PP
Referenced by adjacency_timed_reset(), ccnd_create(), ccnd_register_adjacency(), ccnd_start_notice(), do_deferred_write(), finalize_face(), and register_new_face()\&.
.SS "unsigned \fBccnd_faceid_from_guid\fP (struct \fBccnd_handle\fP *h, const unsigned char *guid, size_tsize)"
.PP
Return the faceid associated with the guid\&. 
.PP
Definition at line 547 of file ccnd\&.c\&.
.PP
Referenced by ccnd_answer_by_guid()\&.
.SS "void \fBccnd_forget_face_guid\fP (struct \fBccnd_handle\fP *h, struct \fBface\fP *face)"
.PP
Forget the guid associated with a face\&. The first byte of face->guid is the length of the actual guid bytes\&. 
.PP
Definition at line 588 of file ccnd\&.c\&.
.PP
Referenced by adjacency_do_reset(), adjacency_timed_reset(), ccnd_answer_req(), check_offer_matches_my_solicit(), and finalize_face()\&.
.SS "void \fBccnd_generate_face_guid\fP (struct \fBccnd_handle\fP *h, struct \fBface\fP *face, intsize, const unsigned char *lo, const unsigned char *hi)"
.PP
Generate a new guid for a face\&. This guid is useful for routing agents, as it gives an unambiguous way to talk about a connection between two nodes\&.
.PP
lo and hi, if not NULL, are exclusive bounds for the generated guid\&. The size is in bytes, and refers to both the bounds and the result\&. 
.PP
Definition at line 620 of file ccnd\&.c\&.
.PP
Referenced by ccnd_answer_req()\&.
.SS "int \fBccnd_init_internal_keystore\fP (struct \fBccnd_handle\fP *)"
.PP
Definition at line 1348 of file ccnd_internal_client\&.c\&.
.PP
Referenced by ccnd_create(), and ccnd_internal_client_start()\&.
.SS "void \fBccnd_internal_client_has_somthing_to_say\fP (struct \fBccnd_handle\fP *h)"
.PP
Schedule the processing of internal client results\&. This little dance keeps us from destroying an interest entry while we are in the middle of processing it\&. 
.PP
Definition at line 5343 of file ccnd\&.c\&.
.PP
Referenced by ccnd_send(), and send_adjacency_solicit()\&.
.SS "int \fBccnd_internal_client_start\fP (struct \fBccnd_handle\fP *)"
.PP
Definition at line 1564 of file ccnd_internal_client\&.c\&.
.PP
Referenced by ccnd_create()\&.
.SS "void \fBccnd_internal_client_stop\fP (struct \fBccnd_handle\fP *)"
.PP
Definition at line 1625 of file ccnd_internal_client\&.c\&.
.PP
Referenced by ccnd_destroy()\&.
.SS "void \fBccnd_meter_bump\fP (struct \fBccnd_handle\fP *h, struct ccnd_meter *m, unsignedamt)"
.PP
Count something (messages, packets, bytes), and roll up some kind of statistics on it\&. 
.PP
Definition at line 643 of file ccnd_stats\&.c\&.
.PP
Referenced by ccnd_meter_init(), ccnd_meter_rate(), ccnd_send(), process_incoming_content(), process_incoming_interest(), process_input(), process_internal_client_buffer(), send_content(), send_interest(), and stuff_link_check()\&.
.SS "struct ccnd_meter* \fBccnd_meter_create\fP (struct \fBccnd_handle\fP *h, const char *what)\fC [read]\fP"
.PP
create and initialize separately allocated meter\&. 
.PP
Definition at line 600 of file ccnd_stats\&.c\&.
.PP
Referenced by enroll_face()\&.
.SS "void \fBccnd_meter_destroy\fP (struct ccnd_meter **)"
.PP
Destroy a separately allocated meter\&. 
.PP
Definition at line 614 of file ccnd_stats\&.c\&.
.PP
Referenced by ccnd_destroy(), and finalize_face()\&.
.SS "void \fBccnd_meter_init\fP (struct \fBccnd_handle\fP *h, struct ccnd_meter *m, const char *what)"
.PP
Initialize a meter\&. 
.PP
Definition at line 626 of file ccnd_stats\&.c\&.
.PP
Referenced by ccnd_meter_create()\&.
.SS "unsigned \fBccnd_meter_rate\fP (struct \fBccnd_handle\fP *h, struct ccnd_meter *m)"
.PP
Return the average rate (units per second) of a metered quantity\&. m may be NULL\&. 
.PP
Definition at line 670 of file ccnd_stats\&.c\&.
.PP
Referenced by collect_face_meter_html(), and collect_meter_xml()\&.
.SS "uintmax_t \fBccnd_meter_total\fP (struct ccnd_meter *m)"
.PP
Return the grand total for a metered quantity\&. m may be NULL\&. 
.PP
Definition at line 687 of file ccnd_stats\&.c\&.
.PP
Referenced by collect_meter_xml()\&.
.SS "void \fBccnd_msg\fP (struct \fBccnd_handle\fP *h, const char *fmt, \&.\&.\&.)"
.PP
Produce ccnd debug output\&. Output is produced via h->logger under the control of h->debug; prepends decimal timestamp and process identification\&. Caller should not supply newlines\&. 
.PP
\fBParameters:\fP
.RS 4
\fIh\fP the ccnd handle 
.br
\fIfmt\fP printf-like format string 
.RE
.PP

.PP
Definition at line 46 of file ccnd_msg\&.c\&.
.SS "int \fBccnd_n_stale\fP (struct \fBccnd_handle\fP *h)"
.PP
Return the number of stale content objects still cached\&. This is only used for status reporting 
.PP
Definition at line 1119 of file ccnd\&.c\&.
.PP
Referenced by collect_stats_html(), and collect_stats_xml()\&.
.SS "int \fBccnd_reg_uri\fP (struct \fBccnd_handle\fP *h, const char *uri, unsignedfaceid, intflags, intexpires)"
.PP
Register a prefix, expressed in the form of a URI\&. \fBReturns:\fP
.RS 4
negative value for error, or new face flags for success\&. 
.RE
.PP

.PP
Definition at line 2682 of file ccnd\&.c\&.
.PP
Referenced by ccnd_internal_client_start(), ccnd_reg_ccnx_ccndid(), ccnd_reg_uri_list(), ccnd_register_adjacency(), ccnd_req_guest(), and ccnd_uri_listen()\&.
.SS "int \fBccnd_req_destroyface\fP (struct \fBccnd_handle\fP *h, const unsigned char *msg, size_tsize, struct \fBccn_charbuf\fP *reply_body)"
.PP
Process a destroyface request for the ccnd internal client\&. \fBParameters:\fP
.RS 4
\fIh\fP is the ccnd handle 
.br
\fImsg\fP points to a ccnd-encoded ContentObject containing a FaceInstance in its Content\&. 
.br
\fIsize\fP is its size in bytes 
.br
\fIreply_body\fP is a buffer to hold the Content of the reply, as a FaceInstance including faceid 
.RE
.PP
\fBReturns:\fP
.RS 4
0 for success, negative for no response, or CCN_CONTENT_NACK to set the response type to NACK\&.
.RE
.PP
Is is an error if the face does not exist\&. 
.PP
Definition at line 2966 of file ccnd\&.c\&.
.PP
Referenced by ccnd_answer_req()\&.
.SS "int \fBccnd_req_newface\fP (struct \fBccnd_handle\fP *h, const unsigned char *msg, size_tsize, struct \fBccn_charbuf\fP *reply_body)"
.PP
Process a newface request for the ccnd internal client\&. \fBParameters:\fP
.RS 4
\fIh\fP is the ccnd handle 
.br
\fImsg\fP points to a ccnd-encoded ContentObject containing a FaceInstance in its Content\&. 
.br
\fIsize\fP is its size in bytes 
.br
\fIreply_body\fP is a buffer to hold the Content of the reply, as a FaceInstance including faceid 
.RE
.PP
\fBReturns:\fP
.RS 4
0 for success, negative for no response, or CCN_CONTENT_NACK to set the response type to NACK\&.
.RE
.PP
Is is permitted for the face to already exist\&. A newly created face will have no registered prefixes, and so will not receive any traffic\&. 
.PP
Definition at line 2819 of file ccnd\&.c\&.
.PP
Referenced by ccnd_answer_req()\&.
.SS "int \fBccnd_req_prefixreg\fP (struct \fBccnd_handle\fP *h, const unsigned char *msg, size_tsize, struct \fBccn_charbuf\fP *reply_body)"
.PP
Process a prefixreg request for the ccnd internal client\&. \fBParameters:\fP
.RS 4
\fIh\fP is the ccnd handle 
.br
\fImsg\fP points to a ccnd-encoded ContentObject containing a ForwardingEntry in its Content\&. 
.br
\fIsize\fP is its size in bytes 
.br
\fIreply_body\fP is a buffer to hold the Content of the reply, as a FaceInstance including faceid 
.RE
.PP
\fBReturns:\fP
.RS 4
0 for success, negative for no response, or CCN_CONTENT_NACK to set the response type to NACK\&. 
.RE
.PP

.PP
Definition at line 3123 of file ccnd\&.c\&.
.PP
Referenced by ccnd_answer_req()\&.
.SS "int \fBccnd_req_selfreg\fP (struct \fBccnd_handle\fP *h, const unsigned char *msg, size_tsize, struct \fBccn_charbuf\fP *reply_body)"
.PP
Process a selfreg request for the ccnd internal client\&. \fBParameters:\fP
.RS 4
\fIh\fP is the ccnd handle 
.br
\fImsg\fP points to a ccnd-encoded ContentObject containing a ForwardingEntry in its Content\&. 
.br
\fIsize\fP is its size in bytes 
.br
\fIreply_body\fP is a buffer to hold the Content of the reply, as a ccnb-encoded ForwardingEntry 
.RE
.PP
\fBReturns:\fP
.RS 4
0 for success, negative for no response, or CCN_CONTENT_NACK to set the response type to NACK\&. 
.RE
.PP

.PP
Definition at line 3143 of file ccnd\&.c\&.
.PP
Referenced by ccnd_answer_req()\&.
.SS "int \fBccnd_req_strategy\fP (struct \fBccnd_handle\fP *h, const unsigned char *msg, size_tsize, const char *action, struct \fBccn_charbuf\fP *reply_body)"
.PP
Process a strategy selection request\&. This is a request to set, remove, or get the strategy associated with a prefix\&. 
.PP
Definition at line 3265 of file ccnd\&.c\&.
.PP
Referenced by ccnd_answer_req()\&.
.SS "int \fBccnd_req_unreg\fP (struct \fBccnd_handle\fP *h, const unsigned char *msg, size_tsize, struct \fBccn_charbuf\fP *reply_body)"
.PP
Process an unreg request for the ccnd internal client\&. \fBParameters:\fP
.RS 4
\fIh\fP is the ccnd handle 
.br
\fImsg\fP points to a ccnd-encoded ContentObject containing a ForwardingEntry in its Content\&. 
.br
\fIsize\fP is its size in bytes 
.br
\fIreply_body\fP is a buffer to hold the Content of the reply, as a ccnb-encoded ForwardingEntry 
.RE
.PP
\fBReturns:\fP
.RS 4
0 for success, negative for no response, or CCN_CONTENT_NACK to set the response type to NACK\&. 
.RE
.PP

.PP
Definition at line 3163 of file ccnd\&.c\&.
.PP
Referenced by ccnd_answer_req()\&.
.SS "void \fBccnd_run\fP (struct \fBccnd_handle\fP *h)"
.PP
Run the main loop of the ccnd\&. 
.PP
Definition at line 5582 of file ccnd\&.c\&.
.PP
Referenced by main(), and start_ccnd()\&.
.SS "void \fBccnd_send\fP (struct \fBccnd_handle\fP *h, struct \fBface\fP *face, const void *data, size_tsize)"
.PP
Send data to the face\&. No direct error result is provided; the face state is updated as needed\&. 
.PP
Definition at line 5419 of file ccnd\&.c\&.
.PP
Referenced by ccnd_stats_handle_http_connection(), send_http_response(), and stuff_and_send()\&.
.SS "int \fBccnd_set_face_guid\fP (struct \fBccnd_handle\fP *h, struct \fBface\fP *face, const unsigned char *guid, size_tsize)"
.PP
Associate a guid with a face\&. The same guid is shared among all the peers that communicate over the face, and no two faces at a node should have the same guid\&.
.PP
\fBReturns:\fP
.RS 4
0 for success, -1 for error\&. 
.RE
.PP

.PP
Definition at line 510 of file ccnd\&.c\&.
.PP
Referenced by ccnd_generate_face_guid(), check_offer_matches_my_solicit(), and send_adjacency_solicit()\&.
.SS "int \fBccnd_stats_handle_http_connection\fP (struct \fBccnd_handle\fP *, struct \fBface\fP *)"
.PP
Definition at line 96 of file ccnd_stats\&.c\&.
.PP
Referenced by process_input()\&.
.SS "struct \fBstrategy_instance\fP* \fBcreate_strategy_instance\fP (struct \fBccnd_handle\fP *h, struct \fBnameprefix_entry\fP *npe, const struct \fBstrategy_class\fP *sclass, const char *parameters)\fC [read]\fP"
.PP
Definition at line 4641 of file ccnd\&.c\&.
.PP
Referenced by ccnd_req_strategy(), and get_strategy_instance()\&.
.SS "struct \fBstrategy_instance\fP* \fBget_strategy_instance\fP (struct \fBccnd_handle\fP *h, struct \fBnameprefix_entry\fP *npe)\fC [read]\fP"
.PP
Search the nameprefix tree to find the strategy that is in effect\&. 
.PP
Definition at line 4692 of file ccnd\&.c\&.
.PP
Referenced by ccnd_req_strategy(), do_propagate(), and strategy_callout()\&.
.SS "void \fBremove_strategy_instance\fP (struct \fBccnd_handle\fP *h, struct \fBnameprefix_entry\fP *npe)"
.PP
Definition at line 4673 of file ccnd\&.c\&.
.PP
Referenced by ccnd_req_strategy(), create_strategy_instance(), and finalize_nameprefix()\&.
.SS "struct \fBstrategy_class\fP* \fBstrategy_class_from_id\fP (const char *id)\fC [read]\fP"
.PP
Definition at line 4629 of file ccnd\&.c\&.
.SH "Variable Documentation"
.PP 
.SS "const char* \fBccnd_usage_message\fP"
.PP
CCND Usage message\&. 
.PP
Definition at line 291 of file ccnd_msg\&.c\&.
.PP
Referenced by main()\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Content-Centric Networking in C from the source code\&.
